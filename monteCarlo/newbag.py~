#Feras Aldahlawi
#Montecarlo simulation for Physics class

import random
import time

NTRIALS = 1000000

SPACER = 100

GREEN =  1
YELLOW = 2
RED =    3
BLUE =   4
WHITE =  5
BLACK =  6
# TheBagHolds = { GREEN:44, YELLOW:15, BLUE:11, RED:11, WHITE:2, BLACK:1 }
# this is for Fall 2010 contents of the bag
TheBagHolds = { GREEN:44, YELLOW:15, BLUE:20, RED:11, WHITE:2, BLACK:1 }
COLORLIST = [GREEN, YELLOW, RED, BLUE, WHITE, BLACK]
COLORS = { GREEN:'green',
           YELLOW:'yellow',
           RED:'red',
           BLUE:'blue',
           WHITE:'white',
           BLACK:'black'     }

def compareTwoCounts( x1, x2):
    print "top of compareTwoCounts, x1 = %d, x2 = %d"%(x1, x2)
    if  x1 > x2:
        print "returning %d > %d"%(x1,x2)
        return 1
    elif x1 < x2:
        print "returning %d < %d"%(x1,x2)
        return 2
    elif x1 == x2:
        print "returning %d = %d"%(x1,x2)
        return 3
    else:
        print "Fell thru!"
        return 0

def Btester( TBH, ansrDict):
    # More red than blue, vice versa, or same number?
    if RED  not in ansrDict: ansrDict[RED] = 0
    if BLUE not in ansrDict: ansrDict[BLUE] = 0
    return ( compareTwoCounts(TBH[RED], TBH[BLUE])
           == compareTwoCounts(ansrDict[RED], ansrDict[BLUE]) )



def Bt2():
    tbh = { RED: 3, BLUE:3 }
    ad = {}
    for r in range(5):
        ad.clear()
        ad[RED] = r
        for b in range(5):
            ad[BLUE] = b
            S = "r = %d, b=%d, Btester gave %d = "%(r, b, Btester(tbh, ad))
            if Btester(tbh,ad): S += "True"
            else: S += "False"
            print S


def fillTheBag():
    '''
    Creates a list of ints, each of which is one of the COLORS, such that
    there are as many instances of each COLOR as given in TheBagHolds[COLOR].
    '''
    TheBag = []
    for color in TheBagHolds:
        n = TheBagHolds[ color ]
        for i in range( n ):
            TheBag.append( color )
    return TheBag

def BagCopy(origBag):
    '''
    Create a (deep) copy of a list, but ensure that the order of the list
    is such that the colors alternate as much as possible.
    '''
    # print "top of bagcopy"
    bc = []
    BagRemains = {}
    for c in COLORLIST:
        BagRemains[c] = TheBagHolds[c]
    # print "len(BagRemains) = %d"%len(BagRemains)
    lastc = 0
    # round = 0
    # print "target end length = %d"%sum(TheBagHolds.values())
    while len(bc) < sum(TheBagHolds.values()):
        # print "\ntop of outer while loop"
        NotAdded = True
        while NotAdded:
            c = lastc + 1
            if c > len(COLORLIST): c = 1
            # print "color c now is %d"%c
            if BagRemains[c] > 0:
                bc.append(c)
                BagRemains[c] -= 1
                NotAdded = False
                # print "added color %d to bc, BagRemains[c] now %d"%(c, BagRemains[c])
                # print "bc length now %d, sum of BagRemains now %d"%(len(bc), sum(BagRemains.values()))
                # round += 1
                # if round > 300: assert 9 == 1
            lastc = c
            # round += 1
            # if round > 300: assert 9 == 7
    # print "Done.  BC has:"
    # print str(bc)
    # assert 2 == 1
    return bc

def makekey( rolldict ):
    '''
    @param rolldict: a dict with the counts pulled in each color

    Creates a single int which unabiguously gives how many of each color
    are present in the roll.  (All information about the order in which
    things were picked is destroyed, though.
    '''
    ansr = 0
    for color in COLORLIST:
        if color in rolldict:
            item = rolldict[color]
            ansr += pow(SPACER, color) * item
    return ansr

def makerolldir( roll ):
    '''
    takes a list of drawn beads and creates a dict whose keys are COLORS
    and values are the count of that color drawn.
    '''
    ansr = {}
    for bead in roll:
        if bead in ansr: ansr[bead] += 1
        else: ansr[bead] = 1
    return ansr

def unmakekey( key ):
    '''
    takes the single int key made by makekey and turns it into both a dict
    whose keys are COLORS and values are the count of beads of that color,
    and a string describing the same information.

    returns both a dict and a string.
    '''
    textansr = ''
    ansrD = COLORS.fromkeys( COLORS.keys(), 0)
    color = 0
    while key > 0:
        key /= SPACER
        color += 1
        n = key % SPACER
        if n > 0 or color == GREEN:
            ansrD[ color ] = n
            if len(textansr) > 0: textansr += ', '
            if color == GREEN and n == 0:
                textansr += "NO " + COLORS[ color ]
            else:
                textansr += "%d "%n + COLORS[ color ]
    return (ansrD, textansr)

class Evaluator(object):
    '''
    Class for telling whether a set of draws got the right answer with
    respect to the bag's actual contents.
    '''
    def __init__(self):
        self.FirstOneBigger = 1
        self.SecondOneBigger = 2
        self.SameNumber = 3
        self.Undefined = 0

    def createScoresheet(self):
        '''
        Creates and returns a dict with 5 entries.  The keys are the letters
        A thru E, corresponding to the five questions to be scored.  The values
        themselves 2-item dicts whose keys are True and False, corresponding to
        whether a particular run got the correct answer.  The values are 0 to
        start.  It is expected that the values will be incremented for each 
        trial run that is "correct" or "incorrect".
        '''
        cs = {}
        cs['A'] = {True:0, False:0}
        cs['B'] = {True:0, False:0}
        cs['C'] = {True:0, False:0}
        cs['D'] = {True:0, False:0}
        cs['E'] = {True:0, False:0}
        return cs

    def QuestionA(self, ansrDict, dbg = False ):
        '''
        All the Questions return True if this ansrDict has the right
        answer relative to TheBag, and false otherwise.

        For question A, all we need ot do is count the "unknown" colors
        found, since the students may take as given (whether they find
        any or not) that there are green, yellow, red, and blue in the bag.
        '''
        # How many colors are in the bag?
        # return ( len(ansrDict) == len(TheBagHolds) )
        cc = COLORS.keys()
        if dbg: print "starting cc is "+str(cc)
        if dbg: print "starting ansrDict is "+str(ansrDict)
        try:
            i = cc.index(GREEN)
        except ValueError:
            i = -1
        if i >= 0:
            del cc[i]
        try:
            i = cc.index(YELLOW)
        except ValueError:
            i = -1
        if i >= 0:
            del cc[i]
        try:
            i = cc.index(BLUE)
        except ValueError:
            i = -1
        if i >= 0:
            del cc[i]
        try:
            i = cc.index(RED)
        except ValueError:
            i = -1
        if i >= 0:
            del cc[i]
        if dbg: print "remaining cc is "+str(cc)
        ac = ansrDict.keys()
        try:
            i = ac.index(GREEN)
        except ValueError:
            i = -1
        if i >= 0:
            del ac[i]
        try:
            i = ac.index(YELLOW)
        except ValueError:
            i = -1
        if i >= 0:
            del ac[i]
        try:
            i = ac.index(BLUE)
        except ValueError:
            i = -1
        if i >= 0:
            del ac[i]
        try:
            i = ac.index(RED)
        except ValueError:
            i = -1
        if i >= 0:
            del ac[i]
        if dbg: print "remaining ac is "+str(ac)
        if dbg: print "len(ac) == len(cc) tests %d"%( len(ac) == len(cc) )
        return ( len(ac) == len(cc) )

    def compareTwoCounts(self, x1, x2):
        if  x1 > x2: return self.FirstOneBigger
        elif x1 < x2: return self.SecondOneBigger
        elif x1 == x2: return self.SameNumber
        else: return self.Undefined

    def QuestionB(self, ansrDict):
        # More red than blue, vice versa, or same number?
        if RED  not in ansrDict: ansrDict[RED] = 0
        if BLUE not in ansrDict: ansrDict[BLUE] = 0
        return ( self.compareTwoCounts(TheBagHolds[RED], TheBagHolds[BLUE])
                 == self.compareTwoCounts(ansrDict[RED], ansrDict[BLUE]) )

    def QuestionC(self, ansrDict):
        # More yellow than blue, vice versa, or same number?
        if YELLOW  not in ansrDict: ansrDict[YELLOW] = 0
        if BLUE not in ansrDict: ansrDict[BLUE] = 0
        return (self.compareTwoCounts(TheBagHolds[YELLOW], TheBagHolds[BLUE])
                == self.compareTwoCounts(ansrDict[YELLOW], ansrDict[BLUE]) )

    def QuestionD(self, ansrDict):
        # More yellow than red, vice versa, or same number?
        if YELLOW  not in ansrDict: ansrDict[YELLOW] = 0
        if RED not in ansrDict: ansrDict[RED] = 0
        return (self.compareTwoCounts(TheBagHolds[YELLOW], TheBagHolds[RED])
                == self.compareTwoCounts(ansrDict[YELLOW], ansrDict[RED]) )

    def QuestionE(self, ansrDict):
        # More greens than all others put together?
        realnongreens = 0
        trialnongreens = 0
        # it can happen that no greens are found in a trial.
        trialgreens = 0 
        for c in COLORS:
            if c == GREEN:
                realgreens = TheBagHolds[GREEN]
                if c in ansrDict:
                    trialgreens = ansrDict[GREEN]
            else:
                realnongreens += TheBagHolds[c]
                if c in ansrDict:
                    trialnongreens += ansrDict[c]
        real = self.compareTwoCounts( realgreens, realnongreens )
        trial = self.compareTwoCounts( trialgreens, trialnongreens )
        if real == trial: return True
        elif real == self.SecondOneBigger and trial == self.SameNumber: return True
        elif real == self.SameNumber and trial == self.SecondOneBigger: return True
        else: return False

    def score(self, ansrDict, scoresheet, dbg=False):
        '''
        takes a dict contructed from a trial's list of beads drawn and
        updates the scoresheet to include how it did.
        '''
        A = self.QuestionA(ansrDict, dbg)
        B = self.QuestionB(ansrDict)
        C = self.QuestionC(ansrDict)
        D = self.QuestionD(ansrDict)
        E = self.QuestionE(ansrDict)
        sa = scoresheet['A']
        sa[ A ] += 1
        sa = scoresheet['B']
        sa[ B ] += 1
        sa = scoresheet['C']
        sa[ C ] += 1
        sa = scoresheet['D']
        sa[ D ] += 1
        sa = scoresheet['E']
        sa[ E ] += 1

class Strategy(object):
    '''
    base class for all bead-drawing strategy objects.
    '''
    
    def __init__(self, RawPulls):
        '''
        RawPulls is the number of beads drawn in all.  Must be
        at least 20, and must be a multiple of 5.
        '''
        assert RawPulls >= 20
        assert RawPulls % 5 == 0
        self.RawPulls = RawPulls

    def Draw(self, RNG, TheBag):
        '''
        the Draw method must be overridden by all the derived classes.
        It returns a list of length self.RawPulls which is the sequence
        of beads drawn.
        '''
        raise NotImplementedError

class Quintets(Strategy):
    def Draw(self, RNG, TheBag):
        grabbed = []
        ngrabs = self.RawPulls / 5
        for aQuintet in range( ngrabs ):
            roll = RNG.sample(TheBag, 5)
            grabbed.extend(roll)
        return grabbed

class Singles(Strategy):
    def Draw(self, RNG, TheBag):
        grabbed = []
        for x in range( self.RawPulls ):
            g = RNG.choice(TheBag)
            grabbed.append(g)
        return grabbed

class Reactive1(Strategy):
    '''
    If the draw isn't green, put it back.
    If the draw is green and there's fewer than 4 beads held out, keep it out.
    If the draw is green and there's already 4 green ones held, return one
    green.
    '''
    def Draw(self, RNG, TheBag):
        held = []
        draws = []
        Bag = BagCopy(TheBag)
        while len(draws) < self.RawPulls:
            d = RNG.choice(Bag)
            draws.append(d)
            if d == GREEN and len(held) < 4:
                held.append(d)
                i = Bag.index(d)
                del Bag[i]
        return draws

class Simulation(object):
    '''
    The Simulation object creates a Strategy object and then performs
    NTRIALS executions of the strategy, counting all the results.
    '''
    def __init__(self, S, Pullcount):
        ss = S.lower()
        if ss.startswith('quintets'):
            TheStrategy = Quintets( Pullcount )
        elif ss.startswith('singles'):
            TheStrategy = Singles( Pullcount )
        elif ss.startswith('reactive1'):
            TheStrategy = Reactive1( Pullcount )
        else:
            print "unrecognized strategy, got "+S
            raise ValueError
        self.strategy = TheStrategy
        self.strategyName = ss.strip()

    def reportCard(self, ntrials, scoresheet):
        print "\n\n -*-*-*-*-*-\nReport card for %d trials using strategy "%ntrials+self.strategyName
        print "   Each trial has a total of %d beads drawn"%self.strategy.RawPulls
        bs = {}
        bs['A'] = "A: total number of colors in bag"
        bs['B'] = "B: more red than blue"
        bs['C'] = "C: more yellow than blue"
        bs['D'] = "D: more yellow than red"
        bs['E'] = "E: more greens than all others combined"
        for q in ['A', 'B', 'C', 'D', 'E'] :
            qs = scoresheet[q]
            print "Question "+bs[q]
            print "     correct %d,  incorrect %d"%(qs[True], qs[False])
            assert qs[True] + qs[False] == ntrials
            rating = float(qs[True]) / float(ntrials) * 100.
            print "      %.1f%% correct"%rating
            

    def Run(self, ntrials, rng, bag):
        BigE = Evaluator()
        scoresheet = BigE.createScoresheet()
        BigD = {}
        for i in range(ntrials):
            if i % 100000 == 1: print "draw number %d"%i+"  "+time.asctime()
            d = self.strategy.Draw(rng, bag)
            # if i % 1000 == 1: print "draw is "+str(d)
            dd = makerolldir( d )
            # if i % 1000 == 1: print "dd is "+str(dd)
            # if i % 1000 == 1 : BigE.score( dd, scoresheet, True )
            BigE.score( dd, scoresheet )
            k = makekey( dd )
            if k in BigD: BigD[k] += 1
            else: BigD[k] = 1
        self.reportCard(ntrials, scoresheet)          
        print "In %d trials, there are %d different student draws"%(ntrials, len(BigD))
        return (scoresheet, BigD)

def barfD(D):
    snorter = []
    for k in D:
        v = D[k]
        t = (v, k)
        snorter.append(t)
    snorter.sort()
    snorter.reverse()
    for t in snorter:
        k = t[1]
        (dd, ss) = unmakekey(k)
        S = ss + " : " + str(D[k])
        print S
        
if __name__ == '__main__' :
    # Bt2()
    time1 = time.asctime()
    print "started this run at "+time1
    rng = random.Random()
    TheBag = fillTheBag()
    s = raw_input( "Total number of beads drawn in one trial? ")
    n = int(s)
    print "\nWhich draw strategy to use?"
    ss = raw_input( "Implemented: Singles, Quintets, Reactive1: ")
    BigS = Simulation( ss, n )
    (scs, BigD) = BigS.Run( NTRIALS, rng, TheBag )
    print "  ended this run at "+time.asctime()
    # print "scs: "+ str(scs)
    barfD( BigD )

